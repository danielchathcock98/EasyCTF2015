Wow, that one was fun...

So it was a lot of reverse engineering of he python code: I will go through step by step

So first, the initial if statement checks for the length of the string (in hex). 0x19 in hex is 25, so the key must be 25 characters long.

Next, the string is made into a character list and this happens:
           int(`[s.pop(r) for r in ([2] + [i for i in range(11, 18, 2)] + [20])[::-1]][::-1]`[2::5]) != 0x61a83
      The first thing to be evaluated is
           ([2] + [i for i in range(11, 18, 2)] + [20])[::-1]
      This creates a list by appending [2] to [11, 13, 15, 17] to [20] = [2, 11, 13, 15, 17, 20], and then the order is reversed with [::-1] so you get [20, 17, 15, 13, 11, 2]
      Then you look at
           [s.pop(r) for r in [20, 17, 15, 13, 11, 2]][::-1]
      This pops off the elements of r at those indeces in that order, then reverses them, so you get [s[2], s[11], s[13], s[15], s[17], s[20]]
      Finally, the backticks (`) indicated the function repr(), which gives a string representation, and [2::5] increments starting at the second character of that string representation, going every 5 characters.
      This turns out to be the string of each of those elements of s right next to each other (assuming they are a single digit). \
      Then
           int() is applied to it
      so we know that these must all be numbers, and they must equal 0x61a83 in decimal, which is 400003. So we know that
           s[2] = 4, s[11, 13, 15, 17] = 0, and s[20] = 3

Next, this happens:
           len(list(set([s.pop(r) for r in map(lambda p: int(p, 2), [("1"*5)[:2], ("1"*5)[2:]])[::-1]]))) != s.index("h")
      So first,
           map(lambda p: int(p, 2), [("1"*5)[:2], ("1"*5)[2:]])[::-1]
      This maps the lamba function (unnamed function) to each value of the list given, and makes a new list out of the output. Thus, the list supplied is ["11", "111"], so then is finds what those binary numbers are:
           = [3,7]. It then Reverses order to [7,3]
      Then
           [s.pop(r) for r in [7,3]] pops the values s[4] and s[8] (because s[2] has already been popped!! Keep track of this)
           = [s[8], s[4]]
      Then is makes this into a set, which would delete any repeats (so if s[8] == s[4], then len = 1 isntead of 2). Then it is turned back into a set, and len is called, which is either 1 or 2
      But len must equal s.index("h"). s[1] is empty, and s[3] (current 2nd index) is also empty, so I arbitrarily chose 1. Therefore,
           s[1] = h, and s[4] = s[8]

Next:
           u = len(list(set([repr(y.append(s.pop(-1))) + repr(z.append(s.pop(-1))) for w in range(2)]))) - 1
      This is mosstly tricky just because you have to know that y.append() will return Nonetype, so repr(y.append()) = None. Therefore,
           [repr(y.append(s.pop(-1))) + repr(z.append(s.pop(-1))) for w in range(2)] = ["NoneNone", "NoneNone"]
           y = [s[24],s[22]], z = [s[23],s[21]]
      Thus, when set() is called on that list, it becomes ["NoneNone"], so u = 1

Then:
           u != len(list(set(y))) ^ len(list(set(z)))
      Since u is 0, then the lengths of the sets of y and z must be the same (either both 1, or both 2).
      Therefore s[24] == s[22] if and only if s[23] == s[21]

Then:
           if (ord(y[u]) ^ ord(z[u])) ^ 0x1e != 0
      So s[24] and s[23] must xor to 0xe1. I arbitrarily chose O and Q for these values, because this works for those two letters.

Then:
           if v.index(s.pop()) ^ len(s) ^ 0x1e != 0
      v is the set of capital letters, so it must xor with len(s) to equal 0x1e. With all of the pops, len(s) = 12 at that point, so
           12 ^ 0x1e = 0x12 = 18, so s[19] (the one that was popped) = 'S'

Then:
           a, i = filter(lambda c: c in v, s), filter(lambda c: c in k, s)
     This simply creates two lists of the remaining capital and lowercase letters in s

Then:
           map(lambda a: a + 0x50, [7, 2, 4, -8]) + [0x4f] * 4 != map(ord, a)
     That map gives us the list [0x57, 0x52, 0x54, 0x48, 0x4f, 0x4f, 0x4f, 0x4f], which are all of the Uppercase lettes, [W,R,T,H,O,O,O,O]

Then:
           i[1:3] = i[2:0:-1] and i != list("hate")
     These two things tell us that i is "hate", but with indeces 1 and 2 swapped, so
           i = [h,t,a,e]

Thus, various strings can be constructed from the information given which passes all of these tests. The key I used is one of these :) Wow that was fun

Flag: Wh4t1aeR1TH0O0O0O0OS3OQOQ
- Daniel
